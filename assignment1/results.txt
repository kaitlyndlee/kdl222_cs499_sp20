The function I found, is_binary, checks if the format of an input buffer is binary. It checks for specific formats such as PDF, UTF-8, and an empty buffer. I found this function on the GitHub repository https://github.com/ggreer/the_silver_searcher. The project hosted on the repository is a command-line tool, similar to ack, that focuses on speed. Because the function has multiple conditional branches, I expect the fuzzers to find many paths.

To test this function with AFL, I used a binary and PDF file as input. I used the simple.pdf file from AFL's GitHub repository. For the first test, using the binary file, I let AFL run for 3 hours. It had been about 2 hours since a new path had been found. AFL completed 304 cycles, found 110 paths, and 2 timeouts occurred. No crashes occurred, but I assume that this function is well-tested and not easy to crash. AFL also found 14 favored paths and 20 new edges. For the second test, using the PDF file, AFL ran for 2.5 hours and stopped finding new paths about an hour in. 20 cycles were completed with 117 total paths and no crashes. There were 14 favored paths, 21 new edges, and 23 timeouts (3 unique). The second test may have resulted in more paths because of it starting in a PDF format already, allowing it to have a higher coverage than starting out with the binary file. I also went ahead and reran the second test with the -d flag for 2 hours. This resulted in 112 paths, 12 being favored, with 19 edges. The paths were found a lot faster with the -d flag.

 As for testing with libFuzzer, I started with a size limit of 32. This resulted in 156010551 executions, 43 coverage points, and 203 inputs of 50 kilobytes that ran for about an hour. After this time, there seemed to be no new inputs discovered. Again, I did not expect any crashes to occur. For my second test, I started with a size limit of 1024. This resulted in a run that lasted about 1 hour with 71000919 executions. There were 43 coverage points again and 236 inputs of 245 kilobytes found. I was not surprised that the coverage did not increase since I only increased the size limit and the functions looks for very specific combinations of bytes. 
